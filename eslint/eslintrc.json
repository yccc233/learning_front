{
    "env": {                                        //一个环境定义了一组预定义的全局变量。可用的环境还包括：看http://eslint.cn/docs/user-guide/configuring#specifying-environments
        "browser": true,
        "es2021": true,
        "es6": true
    },
    "extends": [
        "plugin:react/recommended",
        "eslint:recommended"
        "airbnb"
    ],
    "parser": "esprima",                            //解析器，ESLint 默认使用Espree作为其解析器
    "parser": "babel-eslint",
    "parserOptions": {                              //在使用自定义解析器时，为了让 ESLint 在处理非 ECMAScript 5 特性时正常工作，配置属性 parserOptions 仍然是必须的。
        "ecmaFeatures": {                           //这是个对象，表示你想使用的额外的语言特性
            "globalReturn": false,                  //允许在全局作用域下使用 return 语句
            "jsx": true ,
            "impliedStrict": false,                 //启用全局 strict mode (如果 ecmaVersion 是 5 或更高)
            "experimentalObjectRestSpread": false   //启用实验性的 object rest/spread properties (https://github.com/sebmarkbage/ecmascript-rest-spread)支持。(重要：这是一个实验性的功能,在未来可能会有明显改变。 建议你写的规则**不要**依赖该功能，除非当它发生改变时你愿意承担维护成本。)
        },
        "ecmaVersion": 13,                          //ECMAScript版本，不过没有自动启用es全局变量功能，如果要支持，需要{ "env":{ "es6": true } }
        "sourceType": "module"                      //设置为 "script" (默认) 或 "module"（如果你的代码是 ECMAScript 模块)。
    },
    "plugins": ["react","a-plugin"],                //插件，可以省略包名的前缀 eslint-plugin-
    "processor": "a-plugin/a-processor",            //插件所需的处理器
    "overrides": [                                  //要为特定类型的文件指定处理器，请使用 overrides 键和 processor 键的组合。
        {
            "files": ["*.md"],                      //处理文件类型
            "processor": "a-plugin/markdown"        //处理器
        }
    ],
    "rules": {
        "semi": "error",                            //分号，error类型
        "semi": ["error", "always"]                 //分号，error类型，总是
    },
    "globals": {                                    //配置全局变量
        "var1": "writable",                         //设置为 "writable" 以允许重写变量
        "var2": "readonly"                          //设置为 "readonly" 不允许重写变量
    },
    "plugins": [                                    //配置定义在插件中的一个规则的时候，你必须使用 插件名/规则ID 的形式。
        "plugin1"
    ],
    "rules": {
        "eqeqeq": "off",
        "curly": "error",
        "quotes": ["error", "double"],
        "plugin1/rule1": "error"
    },
    "rules": {                                      //若要禁用一组文件的配置文件中的规则，请使用 overrides 和 files
        //...
    },
    "overrides": [{
        "files": ["*-test.js","*.spec.js"],
        "rules": {
            "no-unused-expressions": "off"
        }
    }],
    "settings": {                                   //ESLint 支持在配置文件添加共享设置。你可以添加 settings 对象到配置文件，它将提供给每一个将被执行的规则。如果你想添加的自定义规则而且使它们可以访问到相同的信息，这将会很有用，并且很容易配置。
        "sharedData": "Hello"
    },
    "root": true,                                   //在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 "root": true。ESLint 一旦发现配置文件中有 "root": true，它就会停止在父级目录中寻找。
    "extends": "eslint:recommended",
    "rules": {
        // enable additional rules
        "indent": ["error", 4],
        "linebreak-style": ["error", "unix"],
        "quotes": ["error", "double"],
        "semi": ["error", "always"],

        // override default options for rules from base configurations
        "comma-dangle": ["error", "always"],
        "no-cond-assign": ["error", "always"],

        // disable rules from base configurations
        "no-console": "off",
    }
}

//package.json
{
  "name": "mypackage",
  "version": "0.0.1",
  "eslintConfig": {
      "env": {                                      //同上
          "browser": true,
          "node": true
      }
  },
  "eslintIgnore": ["hello.js", "world.js"]          //忽略的文件
}
